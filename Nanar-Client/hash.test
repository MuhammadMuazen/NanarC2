use nanar_client::*;

use sha2::{Digest, Sha256};
use base64::prelude::*;


fn main() {

    //println!("{}>", fs_functions::get_current_dir());
    //println!("{}", fs_functions::list_directory_contents(fs_functions::get_current_dir().as_str()))

    /*
    ///// This is just a test for hasing and encoding the password that will init the connection
    let secret: &[u8; 16] = b"thisismypassword";

    let mut hasher = Sha256::new();
    hasher.update(secret);

    let res = hasher.finalize();

    let mut final_pass: String = String::new();

    for i in 0..res.len() {
        final_pass.push_str(res[i].to_string().as_str());

        if i != res.len() - 1 {
            final_pass.push(',');
        }
    }


    let encoded_final_pass: String = BASE64_STANDARD.encode(final_pass.clone());


    println!("{:?}", res);

    println!("{:?}", final_pass);

    println!("{}", encoded_final_pass);
    */

}


/////////////////////////////////////// reference
pub fn init_conn_with_server(
    server_addr: &str,
    server_port: &str,
    init_conn_pass: &str,
) -> std::io::Result<()> {
    // Constants
    const HEARTBEAT_TIMEOUT_MS: u64 = 3000;
    let heartbeat_duration = std::time::Duration::from_millis(HEARTBEAT_TIMEOUT_MS);

    // Parse server address
    let server_ip = connection_helper::ip_to_u8_array(server_addr)?;
    let server_port = server_port.parse::<u16>().map_err(|_| {
        std::io::Error::new(
            std::io::ErrorKind::InvalidInput,
            "Failed to parse port number",
        )
    })?;
    
    let socket_addr = std::net::SocketAddr::new(
        std::net::IpAddr::V4(std::net::Ipv4Addr::from(server_ip)),
        server_port,
    );

    // Connection handling
    let mut stream = match std::net::TcpStream::connect_timeout(&socket_addr, heartbeat_duration) {
        Ok(stream) => stream,
        Err(e) => {
            eprintln!("[!] Connection initialization failed: {}", e);
            heartbeat(HEARTBEAT_TIMEOUT_MS, "INIT_CONNECTION_FAILED");
            return Err(e);
        }
    };

    stream.set_read_timeout(Some(heartbeat_duration))?;
    stream.set_write_timeout(Some(heartbeat_duration))?;

    // Communication protocol
    communicate_with_server(&mut stream)?;

    stream.shutdown(std::net::Shutdown::Both)?;
    Ok(())
}

fn communicate_with_server(stream: &mut std::net::TcpStream) -> std::io::Result<()> {
    const HEARTBEAT_TIMEOUT_MS: u64 = 3000;
    let mut buffer = [0u8; 1024];

    // Step 1: Verify server is up
    stream.write_all(CHECK_SERVER_MSG)?;
    println!("[+] Sent {:?}", CHECK_SERVER_MSG);

    let bytes_read = stream.read(&mut buffer)?;
    if bytes_read == 0 {
        return Err(std::io::Error::new(
            std::io::ErrorKind::ConnectionAborted,
            "Server closed connection",
        ));
    }

    let response = String::from_utf8_lossy(&buffer[..bytes_read]);
    if response.as_bytes() != SERVER_IS_UP_MSG {
        return Err(std::io::Error::new(
            std::io::ErrorKind::InvalidData,
            "Unexpected server response",
        ));
    }

    // Step 2: Key exchange
    stream.write_all(CLIENT_INIT_CONN_KEY_MSG)?;
    println!("[+] Sent initialization key to server");

    let bytes_read = stream.read(&mut buffer)?;
    if bytes_read == 0 {
        return Err(std::io::Error::new(
            std::io::ErrorKind::ConnectionAborted,
            "Server closed connection during key exchange",
        ));
    }

    let response = String::from_utf8_lossy(&buffer[..bytes_read]);
    match response.as_bytes() {
        KEY_EXCHANGE_SUCCEEDED_MSG => println!("[+] Key exchange success!"),
        KEY_EXCHANGE_FAILED_MSG => {
            eprintln!("[!] Key exchange failed: {}", response);
            heartbeat(HEARTBEAT_TIMEOUT_MS, "WRONG_KEY");
            return Err(std::io::Error::new(
                std::io::ErrorKind::PermissionDenied,
                "Key exchange failed",
            ));
        }
        _ => {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "Unexpected server response during key exchange",
            ));
        }
    }

    Ok(())
}